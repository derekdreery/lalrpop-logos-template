use crate::{LexError, Token, Statement, Ident};

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = LexError;

    enum Token<'input> {
        "+" => Token::Add,
        "-" => Token::Sub,
        "*" => Token::Mul,
        "/" => Token::Div,
        "=" => Token::Equals,
        ";" => Token::Semicolon,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "let" => Token::Keyword,
        Ident => Token::Ident(<&'input str>),
        Number => Token::Number(<i64>)
    }
}

pub Statement = LetStatement;

LetStatement: Statement = "let" <ident:Ident> "=" <value:Expr> ";" => {
    Statement {
        ident: Ident::no_span(ident.to_owned()),
        value
    }
};

Expr: i64 = {
    <l:Expr> "+" <r:Factor> => l + r,
    <l:Expr> "-" <r:Factor> => l - r,
    Factor,
};

Factor = {
    <l:Factor> "*" <r:Term> => l * r,
    <l:Factor> "/" <r:Term> => l / r,
    Term,
}

Term = {
    Number,
    "(" <Expr> ")"
};
